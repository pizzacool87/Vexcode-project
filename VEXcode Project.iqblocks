{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_drivetrain_set_turn_velocity\" id=\"1#vlM[]hSOJf9V.CO/0!\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"FlQA[d/!L+lO)m8qV}l`\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"-we:M+Kxyp{RK1,obJ.q\"><field name=\"UNITS\">rpm</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"PZv8NG=XtgQ{b$r-)EO4\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"Mk+LF{I|@PFh!(h2Y=7j\"><field name=\"MOTOR\">Motor4</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"fdjMj:%_*n@2_[h}fF=p\"><field name=\"NUM\">65</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"7dX{iMf8)N,|b-p]gV{b\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"cK2]Sip?rZ5E/OG10N1D\"><field name=\"TEXT\">VEXcode</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"=a7?_rh6)-gh}{-9Ju79\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"^~ORhpMpqO(h1$@LkoTD\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"1Q:OKt|2e)GfKvV3au?(\"><field name=\"MOTOR\">Motor4</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"bL:h#]@jWm_?!?(,s14)\"><field name=\"NUM\">45</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"(7T{LBL,KTj=M{mc9!y+\"><field name=\"MOTOR\">Motor10</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"/x#b8J{Zq8hh/8bNNoHQ\"><field name=\"NUM\">140</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\"SL!8*PKVq+:alM]U=n@I\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"jVP(M?+M8@%(ADmb$Z!O\"><field name=\"NUM\">125</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"NRlE:#_ERY@X4ArWpq7,\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"{}YLHu3j}FdHo~o6t.:(\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"3+oPm_WM6~}v7CYEfqsZ\"><field name=\"MOTOR\">Motor10</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"3Bbe,brao(M6?|17mU{p\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"iq_motion_stop_motor\" id=\"]E|(*(.]OU8f:j09%w$T\"><field name=\"MOTOR\">Motor10</field><next><block type=\"iq_motion_spin_for\" id=\"-[.;|R~i4rZ@%,d=xq`~\"><field name=\"MOTOR\">Motor4</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"c#DKX)n)Ku7)h-8ox4]u\"><field name=\"NUM\">30</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"W.IIg:T/)Wj;xIDks[$I\"><field name=\"MOTOR\">Motor10</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"l`@Ne;LV|!w4ibh$V+^+\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"iq_motion_spin_for\" id=\"5d|:Hj-K:LJP#OblUnr:\"><field name=\"MOTOR\">Motor4</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"pb^p8v36Qm,3?Zb$bkVf\"><field name=\"NUM\">90</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[10],"name":"Motor10","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"Motor4","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"Motor10","eDir":"false","f":"Motor4","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"arcadel"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor Motor10 = motor(PORT10, false);\nmotor Motor4 = motor(PORT4, false);\ncontroller Controller = controller();\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool eButtonsControlMotorsStopped = true;\nbool fButtonsControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisB\n      // right = AxisA - AxisB\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisB.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisB.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonEUp/ButtonEDown status to control Motor10\n      if (Controller.ButtonEUp.pressing()) {\n        Motor10.spin(forward);\n        eButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonEDown.pressing()) {\n        Motor10.spin(reverse);\n        eButtonsControlMotorsStopped = false;\n      } else if (!eButtonsControlMotorsStopped) {\n        Motor10.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        eButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonFUp/ButtonFDown status to control Motor4\n      if (Controller.ButtonFUp.pressing()) {\n        Motor4.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        Motor4.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        Motor4.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setTurnVelocity(100.0, rpm);\n  Drivetrain.setDriveVelocity(100.0, rpm);\n  Motor4.spinFor(reverse, 65.0, degrees, true);\n  Brain.Screen.print(\"VEXcode\");\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  Motor4.spinFor(forward, 45.0, degrees, true);\n  Motor10.spinFor(reverse, 140.0, degrees, true);\n  Drivetrain.turnFor(right, 125.0, degrees, true);\n  Drivetrain.driveFor(forward, 200.0, mm, true);\n  Motor10.spinFor(forward, 90.0, degrees, true);\n  Motor10.stop();\n  Motor4.spinFor(reverse, 30.0, degrees, true);\n  Motor10.spinFor(reverse, 90.0, degrees, true);\n  Motor4.spinFor(forward, 90.0, degrees, true);\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n}","target":"Physical"}